import 'dart:io';
import 'dart:isolate';

void main() {
  print('Welcome to the CLI Application! Type a command or "quit" to exit.');

  ReceivePort mainReceivePort = ReceivePort();

  // Start the CLI isolate
  Isolate.spawn(cliIsolate, mainReceivePort.sendPort);

  // Start the Socket isolate
  // Isolate.spawn(serverIsolate, mainReceivePort.sendPort);

  String command = 'nop';

  // Wait for user input
  while (command != 'quit') {
    // Listen to message from CLI
    mainReceivePort.listen((cliMessage) {
      print('Received from CLI: $cliMessage');
      command = cliMessage;
    });

    switch (command) {
      case 'quit':
        break;
      case 'date':
        DateTime currentDate = DateTime.now();
        print(
            'current date: ${currentDate.year}-${currentDate.month}-${currentDate.day}');
        command = 'nop';
        break;
      case 'time':
        DateTime currentTime = DateTime.now();
        print(
            'current time: ${currentTime.hour}:${currentTime.minute}:${currentTime.second}');
        command = 'nop';
        break;
      default:
        print('invalid command [$command]');
        continue;
    }
  }

  // Close the receive port and terminate isolates
  mainReceivePort.close();
}

void cliIsolate(SendPort mainSendPort) {
  // Set up communication with the main isolate
  ReceivePort cliReceivePort = ReceivePort();
  mainSendPort.send(cliReceivePort.sendPort);

  // Listen for messages from the main isolate
  cliReceivePort.listen((message) {
    if (message == 'quit') {
      print('Goodbye from CLI!');
      cliReceivePort.close();
    }
  });

  while (true) {
    stdout.write('CLI >> ');
    String? input = stdin.readLineSync();

    if (input == 'quit') {
      mainSendPort.send('quit');
      break;
    } else if (input == 'date') {
      DateTime currentDate = DateTime.now();
      print(
          'Current date: ${currentDate.year}-${currentDate.month}-${currentDate.day}');
    } else if (input == 'time') {
      DateTime currentTime = DateTime.now();
      print(
          'Current time: ${currentTime.hour}:${currentTime.minute}:${currentTime.second}');
    } else {
      print('Invalid command. Try again!');
    }
  }
}

void serverIsolate(SendPort mainSendPort) {
  // Set up communication with the main isolate
  ReceivePort serverReceivePort = ReceivePort();
  mainSendPort.send(serverReceivePort.sendPort);

  // Listen for messages from the main isolate
  serverReceivePort.listen((message) {
    if (message == 'quit') {
      print('Goodbye from Server!');
      serverReceivePort.close();
    }
  });

  // Start a simple server
  HttpServer.bind('localhost', 8765).then((server) {
    print('Server listening on localhost:8765');

    server.listen((HttpRequest request) {
      request.response.write('Hello from server!');
      request.response.close();
    });
  });
}
