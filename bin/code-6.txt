import 'dart:io';
// import 'dart:async';
import 'dart:convert';

void main() async {
  // Create a socket server
  final serverSocket = await ServerSocket.bind('localhost', 8765);
  print('Server listening on ${serverSocket.address}:${serverSocket.port}');

  // Handle shell commands
  stdinLines().listen((command) {
    handleCommand(command);
  });



  // Handle network client commands
  await for (var socket in serverSocket) {
    socket.listen((clientSocket) {
      final command = String.fromCharCodes(clientSocket).trim();
      handleCommand(command, clientSocket);
    });
  }


    // Listen for incoming connections
    serverSocket.listen((clientSocket) {
      print('New client connected');

      // Handle commands from the client
      clientSocket.listen((command) {
        handleCommand(command as String, clientSocket);
      });
    });
  });

  // Listen for commands from the keyboard
  stdin.transform(utf8.decoder).listen((command) {
    handleCommand(command, null);
  });
}


Stream<String> stdinLines() {
  return stdin.transform(utf8.decoder).transform(const LineSplitter());
}


// void main() async {
//   final server = await ServerSocket.bind('localhost', 8080);
//   print('Server listening on ${server.address}:${server.port}');

//   // Handle shell commands
//   stdin.listen((data) {
//     final command = String.fromCharCodes(data).trim();
//     handleCommand(command);
//   });

//   // Handle network client commands
//   await for (var socket in server) {
//     socket.listen((data) {
//       final command = String.fromCharCodes(data).trim();
//       handleCommand(command);
//     });
//   }
// }

// void handleCommand(String command) {
//   // Handle the command logic here
//   print('Received command: $command');
//   // Add your custom code to execute the command and send responses if needed
// }

void handleCommand(String command) {
  //
  switch (command) {
    case 'quit':
      print('Exiting...');
      // if (clientSocket != null) {
      //   clientSocket.write('Exiting...\n');
      // }
      exit(0);
    case 'time':
      print('Current time: ${DateTime.now()}');
      // if (clientSocket != null) {
      //   clientSocket.write('Current time: ${DateTime.now()}\n');
      // }
      break;
    default:
      print('Invalid command: $command');
      // if (clientSocket != null) {
      //   clientSocket.write('Invalid command: $command\n');
      // }
      break;
  }
}


